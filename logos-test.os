
Перем юТест;
Перем РаботаСТестами;
Перем Лог;

Перем мСообщенияЛога;

Функция ПолучитьСписокТестов(Знач ЮнитТестирование) Экспорт

	юТест = ЮнитТестирование;
	
	МассивТестов = Новый Массив;
	МассивТестов.Добавить("Тест_ДолженСоздатьЛоггерПоУмолчанию");
	МассивТестов.Добавить("Тест_ДолженПроверитьУровниВывода");
	МассивТестов.Добавить("Тест_ДолженПроверитьЧтоЗарегистрированыАппендеры");
	МассивТестов.Добавить("Тест_ДолженПроверитьЧтоУровниВыводаИзменяются");
	МассивТестов.Добавить("Тест_ДолженПроверитьЧтоАппендерУстановлен");
	МассивТестов.Добавить("Тест_ДолженПроверитьВыводБолееПриоритетногоСообщения");
	МассивТестов.Добавить("Тест_ДолженПроверитьЧтоНеВыводятсяМенееПриоритетныеСообщения");
	МассивТестов.Добавить("Тест_ДолженПроверитьВыводОтладки");
	МассивТестов.Добавить("Тест_ДолженПроверитьВыводИнформации");
	МассивТестов.Добавить("Тест_ДолженПроверитьВыводПредупреждения");
	МассивТестов.Добавить("Тест_ДолженПроверитьВыводОшибки");
	МассивТестов.Добавить("Тест_ДолженПроверитьВыводКритичнойОшибки");
	
	Возврат МассивТестов;

КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	ПодключитьСценарий(РаботаСТестами.КаталогИсходников() + "/logging/log.os", "Логгер");
	Лог = Новый Логгер;
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Лог.Закрыть();
	Лог = Неопределено;
	мСообщенияЛога = Неопределено;
КонецПроцедуры

Процедура Тест_ДолженСоздатьЛоггерПоУмолчанию() Экспорт
	
	юТест.ПроверитьРавенство(Лог.Уровни().Информация, Лог.Уровень());
	
КонецПроцедуры

Процедура Тест_ДолженПроверитьУровниВывода() Экспорт
	
	юТест.ПроверитьРавенство(0, Лог.Уровни().Отладка);
	юТест.ПроверитьРавенство(1, Лог.Уровни().Информация);
	юТест.ПроверитьРавенство(2, Лог.Уровни().Предупреждение);
	юТест.ПроверитьРавенство(3, Лог.Уровни().Ошибка);
	юТест.ПроверитьРавенство(4, Лог.Уровни().КритичнаяОшибка);
	юТест.ПроверитьРавенство(5, Лог.Уровни().Отключить);
	
КонецПроцедуры

Процедура Тест_ДолженПроверитьЧтоЗарегистрированыАппендеры() Экспорт
	
	// данные типы регистрируются при создании логгера
	ВФайл = Новый ВыводЛогаВФайл();
	юТест.ПроверитьРавенство(Тип("ВыводЛогаВФайл"), ТипЗнч(ВФайл));
	
	Консоль = Новый ВыводЛогаВКонсоль();
	юТест.ПроверитьРавенство(Тип("ВыводЛогаВКонсоль"), ТипЗнч(Консоль));
	
КонецПроцедуры

Процедура Тест_ДолженПроверитьЧтоУровниВыводаИзменяются() Экспорт
	
	юТест.ПроверитьРавенство(Лог.Уровни().Информация, Лог.Уровень());
	
	Лог.УстановитьУровень(Лог.Уровни().Предупреждение);
	
	юТест.ПроверитьРавенство(Лог.Уровни().Предупреждение, Лог.Уровень());
	
КонецПроцедуры

Процедура Тест_ДолженПроверитьЧтоАппендерУстановлен() Экспорт
	мСообщенияЛога = Новый Массив;
	Лог.ДобавитьСпособВывода(ЭтотОбъект);
	Лог.Информация("Привет");
	юТест.ПроверитьРавенство("Привет", мСообщенияЛога[0]);
КонецПроцедуры

Процедура Тест_ДолженПроверитьВыводБолееПриоритетногоСообщения() Экспорт
	
	мСообщенияЛога = Новый Массив;
	Лог.ДобавитьСпособВывода(ЭтотОбъект);
	Лог.Информация("Привет");
	Лог.Ошибка("Ошибка");
	юТест.ПроверитьРавенство(2, мСообщенияЛога.Количество());
	юТест.ПроверитьРавенство("Привет", мСообщенияЛога[0]);
	юТест.ПроверитьРавенство("Ошибка", мСообщенияЛога[1]);
	
КонецПроцедуры

Процедура Тест_ДолженПроверитьЧтоНеВыводятсяМенееПриоритетныеСообщения() Экспорт
	
	мСообщенияЛога = Новый Массив;
	Лог.ДобавитьСпособВывода(ЭтотОбъект);
	Лог.УстановитьУровень(Лог.Уровни().Ошибка);
	Лог.Информация("Привет");
	Лог.Ошибка("Ошибка");
	юТест.ПроверитьРавенство(1, мСообщенияЛога.Количество());
	юТест.ПроверитьРавенство("Ошибка", мСообщенияЛога[0]);
	
КонецПроцедуры

Процедура Тест_ДолженПроверитьВыводОтладки() Экспорт
	
	мСообщенияЛога = Новый Массив;
	Лог.ДобавитьСпособВывода(ЭтотОбъект);
	Лог.УстановитьУровень(Лог.Уровни().Отладка);
	Лог.Отладка("Привет");
	юТест.ПроверитьРавенство("Привет", мСообщенияЛога[0]);
	
КонецПроцедуры

Процедура Тест_ДолженПроверитьВыводИнформации() Экспорт
	
	мСообщенияЛога = Новый Массив;
	Лог.ДобавитьСпособВывода(ЭтотОбъект);
	Лог.УстановитьУровень(Лог.Уровни().Информация);
	Лог.Информация("Привет");
	юТест.ПроверитьРавенство("Привет", мСообщенияЛога[0]);
	
КонецПроцедуры

Процедура Тест_ДолженПроверитьВыводПредупреждения() Экспорт
	
	мСообщенияЛога = Новый Массив;
	Лог.ДобавитьСпособВывода(ЭтотОбъект);
	Лог.УстановитьУровень(Лог.Уровни().Предупреждение);
	Лог.Предупреждение("Привет");
	юТест.ПроверитьРавенство("Привет", мСообщенияЛога[0]);
	
КонецПроцедуры

Процедура Тест_ДолженПроверитьВыводОшибки() Экспорт
	
	мСообщенияЛога = Новый Массив;
	Лог.ДобавитьСпособВывода(ЭтотОбъект);
	Лог.УстановитьУровень(Лог.Уровни().Ошибка);
	Лог.Ошибка("Привет");
	юТест.ПроверитьРавенство("Привет", мСообщенияЛога[0]);
	
КонецПроцедуры

Процедура Тест_ДолженПроверитьВыводКритичнойОшибки() Экспорт
	
	мСообщенияЛога = Новый Массив;
	Лог.ДобавитьСпособВывода(ЭтотОбъект);
	Лог.УстановитьУровень(Лог.Уровни().КритичнаяОшибка);
	Лог.КритичнаяОшибка("Привет");
	юТест.ПроверитьРавенство("Привет", мСообщенияЛога[0]);
	
КонецПроцедуры

////////////////////////////
// Методы аппендера

Процедура Вывести(Знач Сообщение) Экспорт
	мСообщенияЛога.Добавить(Сообщение);
КонецПроцедуры

Процедура Закрыть() Экспорт
	мСообщенияЛога = Неопределено;
КонецПроцедуры

РаботаСТестами = ЗагрузитьСценарий("test-commons.os");
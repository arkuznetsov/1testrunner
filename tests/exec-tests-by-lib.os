#Использовать logos
#Использовать asserts

#Использовать ".."

Перем юТест;
Перем Лог;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьУспешныйТест");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЗапускТестовКаталога");
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьВыполнениеПараметризованныхТестов");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	ВремТестер = Новый Тестер;
	Лог = Логирование.ПолучитьЛог(ВремТестер.ИмяЛога());

	// ВключитьПоказОтладки();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьУспешныйТест() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "simple.os");

	Тестер = Новый Тестер;
	РезультатТестирования = Тестер.ТестироватьФайл(ПутьФайлаТеста);
	
	Ожидаем.Что(Тестер.ПолучитьРезультатТестирования(), 
		"Ожидали, что получим результат тестирования 0 ( `Прошел` ), а получили другое значение")
		.Равно(Тестер.ЗначенияСостоянияТестов().Прошел);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗапускТестовКаталога() Экспорт
	Тестер = ЯВыполняюКомандуПродуктаCПередачейПараметров("-runall", КаталогТестовыхФикстур());
	
	Ожидаем.Что(Тестер.ПолучитьРезультатТестирования(), 
		"Ожидали, что получим результат тестирования 0 ( `Прошел` ), а получили другое значение")
		.Равно(Тестер.ЗначенияСостоянияТестов().Прошел);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыполнениеПараметризованныхТестов() Экспорт
	
	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "add.os");
	
	ЯВыполняюКомандуПродуктаCПередачейПараметров("-run", ПутьФайлаТеста);

КонецПроцедуры

Процедура ВключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ВыключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Информация);
КонецПроцедуры

Функция ЯВыполняюКомандуПродуктаCПередачейПараметров(Знач Команда, Знач ПараметрыКоманды, Знач ОжидаемыйКодВозврата = Неопределено, ТекстВывода="")

	МассивПутейТестов = Новый Массив;
	МассивПутейТестов.Добавить(Команда);
	МассивПутейТестов.Добавить(ПараметрыКоманды);
	
	Тестер = Новый Тестер;
	Тестер.ВыполнитьКоманду(МассивПутейТестов);
	Возврат Тестер;
КонецФункции

Функция КаталогТестовыхФикстур() Экспорт
	Возврат ОбъединитьПути(КаталогТестов(), "fixtures");
КонецФункции // КаталогИсходников()

Функция КаталогТестов() Экспорт
	Возврат ОбъединитьПути(КаталогИсходников(), "tests");
КонецФункции // КаталогИсходников()

Функция КаталогИсходников() Экспорт
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции // КаталогИсходников()

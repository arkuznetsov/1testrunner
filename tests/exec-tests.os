#Использовать logos
#Использовать asserts
#Использовать 1commands

Перем юТест;
Перем Лог;
Перем ТекстЛогФайлаПродукта;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьУспешныйТест");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЗапускТестовКаталога");
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьВыводПараметризированныхТестов");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьВыполнениеПараметризованныхТестов");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	ТекстЛогФайлаПродукта = "";
	// ВключитьПоказОтладки();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьУспешныйТест() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "simple.os");
	
	ЯВыполняюКомандуПродуктаCПередачейПараметров("-run", ПутьФайлаТеста);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗапускТестовКаталога() Экспорт
	ЯВыполняюКомандуПродуктаCПередачейПараметров("-runall", КаталогТестовыхФикстур());
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыводПараметризированныхТестов() Экспорт

	СтрВывод = "";

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "add.os");
	
	ЯВыполняюКомандуПродуктаCПередачейПараметров("-show", ПутьФайлаТеста, Неопределено, СтрВывод);
	
	Ожидаем.Что(СтрВывод).Содержит("<ТестДолжен_ПроверитьСложение{А:""2"", Б:""2"", Результат:""4""}>");
	Ожидаем.Что(СтрВывод).Содержит("<ТестДолжен_ПроверитьСложение{А:""2"", Б:""3"", Результат:""5""}>");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыполнениеПараметризованныхТестов() Экспорт
	
	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "add.os");
	
	ЯВыполняюКомандуПродуктаCПередачейПараметров("-run", ПутьФайлаТеста);

КонецПроцедуры

Процедура ВключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ВыключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Информация);
КонецПроцедуры

Процедура ЯВыполняюКомандуПродуктаCПередачейПараметров(Знач Команда, Знач ПараметрыКоманды,Знач ОжидаемыйКодВозврата = Неопределено, ТекстВывода="")

	ПутьСтартера = ОбъединитьПути(КаталогИсходников(), "testrunner.os");
	ФайлСтартера = Новый Файл(ПутьСтартера);
	Ожидаем.Что(ФайлСтартера.Существует(), "Ожидаем, что скрипт-стартер <testrunner.os> существует, а его нет. "+ФайлСтартера.ПолноеИмя).Равно(Истина);

	СтрокаКоманды = СтрШаблон("-encoding=utf-8 %1 %2 %3", ПутьСтартера, Команда, ПараметрыКоманды);

	Команда = Новый Команда;
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр(СтрокаКоманды);

	КодВозврата = Команда.Выполнить();

	ТекстВывода = Команда.ПолучитьВывод(); 

	ТекстЛогФайлаПродукта = ТекстВывода;

	Если ОжидаемыйКодВозврата <> Неопределено И КодВозврата <> ОжидаемыйКодВозврата или Лог.Уровень() <= УровниЛога.Отладка  Тогда
		ВывестиТекст(ТекстВывода);
		Ожидаем.Что(КодВозврата, "Код возврата в ЯВыполняюКомандуПродуктаCПередачейПараметров").Равно(ОжидаемыйКодВозврата);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиТекст(Знач Строка)

	Лог.Информация("");
	Лог.Информация("  ----------------    ----------------    ----------------  ");
	Лог.Информация( Строка );
	Лог.Информация("  ----------------    ----------------    ----------------  ");
	Лог.Информация("");

КонецПроцедуры

Функция КаталогТестовыхФикстур() Экспорт
	Возврат ОбъединитьПути(КаталогТестов(), "fixtures");
КонецФункции // КаталогИсходников()

Функция КаталогТестов() Экспорт
	Возврат ОбъединитьПути(КаталогИсходников(), "tests");
КонецФункции // КаталогИсходников()

Функция КаталогИсходников() Экспорт
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции // КаталогИсходников()

Лог = Логирование.ПолучитьЛог("1testrunner.tests");
